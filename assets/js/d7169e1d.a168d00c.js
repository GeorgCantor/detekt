"use strict";(self.webpackChunk_detekt_website=self.webpackChunk_detekt_website||[]).push([[1336],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=i.createContext({}),s=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=s(n),g=l,m=c["".concat(u,".").concat(g)]||c[g]||d[g]||r;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=c;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:l,o[1]=a;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return d}});var i=n(3117),l=n(102),r=(n(7294),n(3905)),o=["components"],a={title:"Run detekt using the Compiler Plugin",keywords:["detekt","static","analysis","code","kotlin"],sidebar:null,permalink:"compilerplugin.html",folder:"gettingstarted",summary:null,sidebar_position:7},u=void 0,s={unversionedId:"gettingstarted/compilerplugin",id:"version-1.23.3/gettingstarted/compilerplugin",title:"Run detekt using the Compiler Plugin",description:"You can integrate detekt in your project using the Detekt Compiler Plugin instead of the classic Detekt Gradle Plugin. Detekt offers a compiler plugin for K1 which allows you to run detekt as part of the Kotlin compilation process. This allows you to run detekt on your code without having separate tasks to invoke and results in much faster execution of detekt, especially if you're using type resolution.",source:"@site/versioned_docs/version-1.23.3/gettingstarted/compilerplugin.mdx",sourceDirName:"gettingstarted",slug:"/gettingstarted/compilerplugin",permalink:"/docs/1.23.3/gettingstarted/compilerplugin",draft:!1,editUrl:"https://github.com/detekt/detekt/edit/main/website/versioned_docs/version-1.23.3/gettingstarted/compilerplugin.mdx",tags:[],version:"1.23.3",sidebarPosition:7,frontMatter:{title:"Run detekt using the Compiler Plugin",keywords:["detekt","static","analysis","code","kotlin"],sidebar:null,permalink:"compilerplugin.html",folder:"gettingstarted",summary:null,sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Run detekt using a Git pre-commit hook",permalink:"/docs/1.23.3/gettingstarted/git-pre-commit-hook"},next:{title:"Comments Rule Set",permalink:"/docs/1.23.3/rules/comments"}},p={},d=[{value:"Using the Compiler Plugin",id:"using-the-compiler-plugin",level:2},{value:"Configuring the Compiler Plugin",id:"configuring-the-compiler-plugin",level:2},{value:"Adding third party plugins",id:"adding-third-party-plugins",level:2},{value:"Running the Compiler Plugin",id:"running-the-compiler-plugin",level:2},{value:"Known Issues",id:"known-issues",level:2}],c={toc:d};function g(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can integrate detekt in your project using the Detekt Compiler Plugin instead of the classic ",(0,r.kt)("a",{parentName:"p",href:"/docs/gettingstarted/gradle"},"Detekt Gradle Plugin"),". Detekt offers a compiler plugin for K1 which allows you to run detekt as part of the Kotlin compilation process. This allows you to run detekt on your code without having separate tasks to invoke and results in much faster execution of detekt, especially if you're using ",(0,r.kt)("a",{parentName:"p",href:"/docs/gettingstarted/type-resolution"},"type resolution"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Please note that Detekt Compiler Plugin is an ",(0,r.kt)("strong",{parentName:"p"},"experimental extension")," of detekt. We expect it to be stable with the upcoming release of detekt (2.x)")),(0,r.kt)("h2",{id:"using-the-compiler-plugin"},"Using the Compiler Plugin"),(0,r.kt)("p",null,"To use the detekt Compiler Plugin, you will have to add the following Gradle Plugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n  id("io.github.detekt.gradle.compiler-plugin") version "1.23.3"\n}\n')),(0,r.kt)("h2",{id:"configuring-the-compiler-plugin"},"Configuring the Compiler Plugin"),(0,r.kt)("p",null,"The compiler plugin can be configured using the ",(0,r.kt)("inlineCode",{parentName:"p"},"detekt {}")," block in your gradle file."),(0,r.kt)("p",null,"The following options are allowed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'detekt {\n    // Define the detekt configuration(s) you want to use.\n    // Defaults to the default detekt configuration.\n    config.setFrom("path/to/config.yml")\n\n    // Applies the config files on top of detekt\'s default config file. `false` by default.\n    buildUponDefaultConfig = false\n\n    // Turns on all the rules. `false` by default.\n    allRules = false\n\n    // Specifying a baseline file. All findings stored in this file in subsequent runs of detekt.\n    baseline = file("path/to/baseline.xml")\n\n    // Disables all default detekt rulesets and will only run detekt with custom rules\n    // defined in plugins passed in with `detektPlugins` configuration. `false` by default.\n    disableDefaultRuleSets = false\n\n    // Adds debug output during task execution. `false` by default.\n    debug = false\n\n    // Kill switch to turn off the Compiler Plugin execution entirely.\n    enableCompilerPlugin = true\n}\n')),(0,r.kt)("p",null,"Moreover, detekt reports can be configured at the Kotlin Compilation tasks level as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {\n    detekt {\n        reports {\n            xml.enabled.set(true)\n            txt.enabled.set(false)\n            create("custom") {\n                enabled.set(false)\n            }\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"adding-third-party-plugins"},"Adding third party plugins"),(0,r.kt)("p",null,"As for the Detekt Gradle Plugin, you can add third party plugins to the Compiler Plugin using the ",(0,r.kt)("inlineCode",{parentName:"p"},"detektPlugins")," configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.23.3")\n}\n')),(0,r.kt)("h2",{id:"running-the-compiler-plugin"},"Running the Compiler Plugin"),(0,r.kt)("p",null,"The compiler plugin will run during your ",(0,r.kt)("inlineCode",{parentName:"p"},"compileKotlin")," tasks execution:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ ./gradlew compileKotlin\n\n> Task :example:compileKotlin\nw: Analysis failed with 1 weighted issues.\nw: file:///.../example/src/main/java/Sample.kt:4:17 MagicNumber: This expression contains a magic number. Consider defining it to a well named constant.\n\nBUILD SUCCESSFUL in 1s\n5 actionable tasks: 1 executed, 4 up-to-date\n")),(0,r.kt)("h2",{id:"known-issues"},"Known Issues"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The rule ",(0,r.kt)("inlineCode",{parentName:"li"},"InvalidPackageDeckaration")," is known to not be working well with the Compiler Plugin ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/detekt/detekt/issues/5747"},"#5747"),".")))}g.isMDXComponent=!0}}]);