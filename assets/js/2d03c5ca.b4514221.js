"use strict";(self.webpackChunk_detekt_website=self.webpackChunk_detekt_website||[]).push([[9029],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9652:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={title:"Run detekt using Maven Ant Task",keywords:["maven","anttask"],sidebar:null,permalink:"mavenanttask.html",folder:"gettingstarted",summary:null,sidebar_position:4},l=void 0,u={unversionedId:"gettingstarted/mavenanttask",id:"version-1.21.0/gettingstarted/mavenanttask",title:"Run detekt using Maven Ant Task",description:"1. Add following lines to your pom.xml.",source:"@site/versioned_docs/version-1.21.0/gettingstarted/mavenanttask.md",sourceDirName:"gettingstarted",slug:"/gettingstarted/mavenanttask",permalink:"/docs/1.21.0/gettingstarted/mavenanttask",draft:!1,editUrl:"https://github.com/detekt/detekt/edit/main/website/versioned_docs/version-1.21.0/gettingstarted/mavenanttask.md",tags:[],version:"1.21.0",sidebarPosition:4,frontMatter:{title:"Run detekt using Maven Ant Task",keywords:["maven","anttask"],sidebar:null,permalink:"mavenanttask.html",folder:"gettingstarted",summary:null,sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Run detekt using Gradle Task",permalink:"/docs/1.21.0/gettingstarted/gradletask"},next:{title:"Using Type Resolution",permalink:"/docs/1.21.0/gettingstarted/type-resolution"}},c={},d=[],p={toc:d};function g(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add following lines to your pom.xml."),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"mvn verify")," (when using the verify phase as we are doing here)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-antrun-plugin</artifactId>\n            <version>1.8</version>\n            <executions>\n                <execution>\n                    \x3c!-- This can be run separately with mvn antrun:run@detekt --\x3e\n                    <id>detekt</id>\n                    <phase>verify</phase>\n                    <configuration>\n                        <target name="detekt">\n                            <java taskname="detekt" dir="${basedir}"\n                                  fork="true" \n                                  failonerror="true"\n                                  classname="io.gitlab.arturbosch.detekt.cli.Main"\n                                  classpathref="maven.plugin.classpath">\n                                <arg value="--input"/>\n                                <arg value="${basedir}/src/main/kotlin"/>\n                                <arg value="--excludes"/>\n                                <arg value="**/special/package/internal/**"/>\n                                <arg value="--report"/>\n                                <arg value="xml:${basedir}/reports/detekt.xml"/>\n                                <arg value="--baseline"/>\n                                <arg value="${basedir}/reports/baseline.xml"/>\n                            </java>\n                        </target>\n                    </configuration>\n                    <goals><goal>run</goal></goals>\n                </execution>\n            </executions>\n            <dependencies>\n                <dependency>\n                    <groupId>io.gitlab.arturbosch.detekt</groupId>\n                    <artifactId>detekt-cli</artifactId>\n                    <version>1.23.2</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n')))}g.isMDXComponent=!0}}]);