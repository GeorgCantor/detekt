"use strict";(self.webpackChunkdetekt_website=self.webpackChunkdetekt_website||[]).push([[6262],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5083:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={title:"Performance Rule Set",sidebar:"home_sidebar",keywords:["rules","performance"],permalink:"performance.html",toc:!0,folder:"documentation"},s=void 0,p={unversionedId:"rules/performance",id:"rules/performance",title:"Performance Rule Set",description:"The performance rule set analyzes code for potential performance problems.",source:"@site/docs/rules/performance.md",sourceDirName:"rules",slug:"/rules/performance",permalink:"/docs/rules/performance",draft:!1,editUrl:"https://github.com/detekt/detekt/edit/main/docs/docs/rules/performance.md",tags:[],version:"current",frontMatter:{title:"Performance Rule Set",sidebar:"home_sidebar",keywords:["rules","performance"],permalink:"performance.html",toc:!0,folder:"documentation"},sidebar:"defaultSidebar",previous:{title:"Naming Rule Set",permalink:"/docs/rules/naming"},next:{title:"Potential-bugs Rule Set",permalink:"/docs/rules/potential-bugs"}},c={},u=[{value:"ArrayPrimitive",id:"arrayprimitive",level:3},{value:"Noncompliant Code:",id:"noncompliant-code",level:4},{value:"Compliant Code:",id:"compliant-code",level:4},{value:"ForEachOnRange",id:"foreachonrange",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-1",level:4},{value:"Compliant Code:",id:"compliant-code-1",level:4},{value:"SpreadOperator",id:"spreadoperator",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-2",level:4},{value:"Compliant Code:",id:"compliant-code-2",level:4},{value:"UnnecessaryTemporaryInstantiation",id:"unnecessarytemporaryinstantiation",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-3",level:4},{value:"Compliant Code:",id:"compliant-code-3",level:4}],m={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The performance rule set analyzes code for potential performance problems."),(0,o.kt)("h3",{id:"arrayprimitive"},"ArrayPrimitive"),(0,o.kt)("p",null,"Using Array","<","Primitive",">"," leads to implicit boxing and performance hit. Prefer using Kotlin specialized Array\nInstances."),(0,o.kt)("p",null,"As stated in the Kotlin ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/basic-types.html#arrays"},"documentation")," Kotlin has\nspecialized arrays to represent primitive types without boxing overhead, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"IntArray"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteArray")," and so on."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun function(array: Array<Int>) { }\n\nfun returningFunction(): Array<Double> { }\n")),(0,o.kt)("h4",{id:"compliant-code"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun function(array: IntArray) { }\n\nfun returningFunction(): DoubleArray { }\n")),(0,o.kt)("h3",{id:"foreachonrange"},"ForEachOnRange"),(0,o.kt)("p",null,"Using the forEach method on ranges has a heavy performance cost. Prefer using simple for loops."),(0,o.kt)("p",null,"Benchmarks have shown that using forEach on a range can have a huge performance cost in comparison to\nsimple for loops. Hence, in most contexts, a simple for loop should be used instead.\nSee more details here: ",(0,o.kt)("a",{parentName:"p",href:"https://sites.google.com/a/athaydes.com/renato-athaydes/posts/kotlinshiddencosts-benchmarks"},"https://sites.google.com/a/athaydes.com/renato-athaydes/posts/kotlinshiddencosts-benchmarks"),"\nTo solve this CodeSmell, the forEach usage should be replaced by a for loop."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.0.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-1"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"(1..10).forEach {\n    println(it)\n}\n(1 until 10).forEach {\n    println(it)\n}\n(10 downTo 1).forEach {\n    println(it)\n}\n")),(0,o.kt)("h4",{id:"compliant-code-1"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 1..10) {\n    println(i)\n}\n")),(0,o.kt)("h3",{id:"spreadoperator"},"SpreadOperator"),(0,o.kt)("p",null,"In most cases using a spread operator causes a full copy of the array to be created before calling a method.\nThis has a very high performance penalty. Benchmarks showing this performance penalty can be seen here:\n",(0,o.kt)("a",{parentName:"p",href:"https://sites.google.com/a/athaydes.com/renato-athaydes/posts/kotlinshiddencosts-benchmarks"},"https://sites.google.com/a/athaydes.com/renato-athaydes/posts/kotlinshiddencosts-benchmarks")),(0,o.kt)("p",null,"The Kotlin compiler since v1.1.60 has an optimization that skips the array copy when an array constructor\nfunction is used to create the arguments that are passed to the vararg parameter. When type resolution is enabled in\ndetekt this case will not be flagged by the rule since it doesn't suffer the performance penalty of an array copy."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.0.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"noncompliant-code-2"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val strs = arrayOf("value one", "value two")\nval foo = bar(*strs)\n\nfun bar(vararg strs: String) {\n    strs.forEach { println(it) }\n}\n')),(0,o.kt)("h4",{id:"compliant-code-2"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// array copy skipped in this case since Kotlin 1.1.60\nval foo = bar(*arrayOf("value one", "value two"))\n\n// array not passed so no array copy is required\nval foo2 = bar("value one", "value two")\n\nfun bar(vararg strs: String) {\n    strs.forEach { println(it) }\n}\n')),(0,o.kt)("h3",{id:"unnecessarytemporaryinstantiation"},"UnnecessaryTemporaryInstantiation"),(0,o.kt)("p",null,"Avoid temporary objects when converting primitive types to String. This has a performance penalty when compared\nto using primitive types directly.\nTo solve this issue, remove the wrapping type."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.0.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-3"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val i = Integer(1).toString() // temporary Integer instantiation just for the conversion\n")),(0,o.kt)("h4",{id:"compliant-code-3"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val i = Integer.toString(1)\n")))}d.isMDXComponent=!0}}]);