"use strict";(self.webpackChunk_detekt_website=self.webpackChunk_detekt_website||[]).push([[2199],{3905:function(e,o,t){t.d(o,{Zo:function(){return s},kt:function(){return d}});var n=t(7294);function r(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function i(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?i(Object(t),!0).forEach((function(o){r(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function l(e,o){if(null==e)return{};var t,n,r=function(e,o){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||(r[t]=e[t]);return r}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),p=function(e){var o=n.useContext(m),t=o;return e&&(t="function"==typeof e?e(o):a(a({},o),e)),t},s=function(e){var o=p(e.components);return n.createElement(m.Provider,{value:o},e.children)},u={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},c=n.forwardRef((function(e,o){var t=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,f=c["".concat(m,".").concat(d)]||c[d]||u[d]||i;return t?n.createElement(f,a(a({ref:o},s),{},{components:t})):n.createElement(f,a({ref:o},s))}));function d(e,o){var t=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=c;var l={};for(var m in o)hasOwnProperty.call(o,m)&&(l[m]=o[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8170:function(e,o,t){t.r(o),t.d(o,{assets:function(){return s},contentTitle:function(){return m},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var n=t(3117),r=t(102),i=(t(7294),t(3905)),a=["components"],l={id:"compose",title:"Configuration for Compose",keywords:["compose","config","configuration","jetpack-compose","rules"],summary:"This page describes each reporting format and explains how to leverage them.",sidebar_position:5},m=void 0,p={unversionedId:"introduction/compose",id:"introduction/compose",title:"Configuration for Compose",description:"Relevant rule sets and their configuration options for Compose styles & usage. The following are being used as reference for Compose usage:",source:"@site/docs/introduction/compose.md",sourceDirName:"introduction",slug:"/introduction/compose",permalink:"/docs/next/introduction/compose",draft:!1,editUrl:"https://github.com/detekt/detekt/edit/main/website/docs/introduction/compose.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"compose",title:"Configuration for Compose",keywords:["compose","config","configuration","jetpack-compose","rules"],summary:"This page describes each reporting format and explains how to leverage them.",sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"Reporting",permalink:"/docs/next/introduction/reporting"},next:{title:"Suppressing Issues",permalink:"/docs/next/introduction/suppressing-rules"}},s={},u=[{value:"FunctionNaming for Compose",id:"functionnaming-for-compose",level:3},{value:"Recommended configuration",id:"recommended-configuration",level:4},{value:"TopLevelPropertyNaming for Compose",id:"toplevelpropertynaming-for-compose",level:3},{value:"Default Style:",id:"default-style",level:5},{value:"Compose Style:",id:"compose-style",level:5},{value:"Recommended configuration",id:"recommended-configuration-1",level:4},{value:"LongParameterList for Compose",id:"longparameterlist-for-compose",level:3},{value:"Recommended configuration",id:"recommended-configuration-2",level:4},{value:"MagicNumber for Compose",id:"magicnumber-for-compose",level:3},{value:"Recommended configuration",id:"recommended-configuration-3",level:4},{value:"UnusedPrivateMember for Compose",id:"unusedprivatemember-for-compose",level:3},{value:"Recommended configuration",id:"recommended-configuration-4",level:4}],c={toc:u};function d(e){var o=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:o,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Relevant rule sets and their configuration options for Compose styles & usage. The following are being used as reference for Compose usage:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/androidx/androidx/blob/androidx-main/compose/docs/compose-api-guidelines.md"},"Compose API Guidelines")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose"},"Compose source"))),(0,i.kt)("h3",{id:"functionnaming-for-compose"},"FunctionNaming for Compose"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/rules/naming#functionnaming"},"FunctionNaming"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@Composable")," functions that return ",(0,i.kt)("inlineCode",{parentName:"p"},"Unit")," are named using ",(0,i.kt)("inlineCode",{parentName:"p"},"PascalCase"),". detekt may see this as a violation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun FooButton(text: String, onClick: () -> Unit) { // Violation for FooButton()\n")),(0,i.kt)("h4",{id:"recommended-configuration"},"Recommended configuration"),(0,i.kt)("p",null,"Choose ",(0,i.kt)("em",{parentName:"p"},"either")," of the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Augment default ",(0,i.kt)("inlineCode",{parentName:"li"},"functionPattern")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"'[a-zA-Z][a-zA-Z0-9]*'")," (default is: ",(0,i.kt)("inlineCode",{parentName:"li"},"'[a-z][a-zA-Z0-9]*'"),")"),(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"ignoreAnnotated")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"['Composable']"))),(0,i.kt)("h3",{id:"toplevelpropertynaming-for-compose"},"TopLevelPropertyNaming for Compose"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/rules/naming#toplevelpropertynaming"},"TopLevelPropertyNaming"),"."),(0,i.kt)("p",null,"Compose guidelines prescribe ",(0,i.kt)("inlineCode",{parentName:"p"},"CamelCase")," for top-level constants."),(0,i.kt)("h5",{id:"default-style"},"Default Style:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"private val FOO_PADDING = 16.dp\n")),(0,i.kt)("h5",{id:"compose-style"},"Compose Style:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"private val FooPadding = 16.dp\n")),(0,i.kt)("h4",{id:"recommended-configuration-1"},"Recommended configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"constantPattern")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"'[A-Z][A-Za-z0-9]*'")," (default is: ",(0,i.kt)("inlineCode",{parentName:"li"},"'[A-Z][_A-Z0-9]*'"),")")),(0,i.kt)("h3",{id:"longparameterlist-for-compose"},"LongParameterList for Compose"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/rules/complexity#longparameterlist"},"LongParameterList"),"."),(0,i.kt)("p",null,"Composables may boast more than the typical number of function arguments (albeit mostly with default values). For example, see ",(0,i.kt)("a",{parentName:"p",href:"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/material/material/src/commonMain/kotlin/androidx/compose/material/OutlinedTextField.kt;l=133?q=OutlinedTextFieldLayout&ss=androidx%2Fplatform%2Fframeworks%2Fsupport:compose%2F"},"OutlinedTextField"),"."),(0,i.kt)("h4",{id:"recommended-configuration-2"},"Recommended configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"functionThreshold")," to a higher value"),(0,i.kt)("li",{parentName:"ul"},"Additionally, can set ",(0,i.kt)("inlineCode",{parentName:"li"},"ignoreDefaultParameters = true"))),(0,i.kt)("h3",{id:"magicnumber-for-compose"},"MagicNumber for Compose"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/rules/style#magicnumber"},"MagicNumber"),"."),(0,i.kt)("p",null,"Class/companion object/top-level properties that declare objects such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Color(0xFFEA6D7E)")," may be considered violations if they don't specify the named parameter (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"Color(color = 0xFFEA6D7E)"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val color1 = Color(0xFFEA6D7E) // Violation\n\nclass Foo {\n  val color2 = Color(0xFFEA6D7E) // Violation\n\n  companion object {\n    val color3 = Color(0xFFEA6D7E) // No violation if ignoreCompanionObjectPropertyDeclaration = true by default\n  }\n}\n")),(0,i.kt)("h4",{id:"recommended-configuration-3"},"Recommended configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"ignorePropertyDeclaration = true"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ignoreCompanionObjectPropertyDeclaration = true")," (default)")),(0,i.kt)("h3",{id:"unusedprivatemember-for-compose"},"UnusedPrivateMember for Compose"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/rules/style#unusedprivatemember"},"UnusedPrivateMember"),"."),(0,i.kt)("p",null,"detekt may see composable preview functions, i.e. those marked with ",(0,i.kt)("inlineCode",{parentName:"p"},"@Preview"),", as unused."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Preview\n@Composable\nprivate fun FooLazyColumnPreview() { // Violation for FooLazyColumnPreview()\n    FooLazyColumn()\n}\n")),(0,i.kt)("h4",{id:"recommended-configuration-4"},"Recommended configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"ignoreAnnotated")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"['Preview']"))))}d.isMDXComponent=!0}}]);