"use strict";(self.webpackChunk_detekt_website=self.webpackChunk_detekt_website||[]).push([[253],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=s(t),m=l,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return t?a.createElement(k,i(i({ref:n},u),{},{components:t})):a.createElement(k,i({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=d;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},987:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return c}});var a=t(3117),l=t(102),o=(t(7294),t(3905)),i=["components"],r={title:"Potential-bugs Rule Set",sidebar:"home_sidebar",keywords:["rules","potential-bugs"],permalink:"potential-bugs.html",toc:!0,folder:"documentation"},p=void 0,s={unversionedId:"rules/potential-bugs",id:"rules/potential-bugs",title:"Potential-bugs Rule Set",description:"The potential-bugs rule set provides rules that detect potential bugs.",source:"@site/docs/rules/potential-bugs.md",sourceDirName:"rules",slug:"/rules/potential-bugs",permalink:"/docs/next/rules/potential-bugs",draft:!1,editUrl:"https://github.com/detekt/detekt/edit/main/website/docs/rules/potential-bugs.md",tags:[],version:"current",frontMatter:{title:"Potential-bugs Rule Set",sidebar:"home_sidebar",keywords:["rules","potential-bugs"],permalink:"potential-bugs.html",toc:!0,folder:"documentation"},sidebar:"defaultSidebar",previous:{title:"Performance Rule Set",permalink:"/docs/next/rules/performance"},next:{title:"Ruleauthors Rule Set",permalink:"/docs/next/rules/ruleauthors"}},u={},c=[{value:"AvoidReferentialEquality",id:"avoidreferentialequality",level:3},{value:"Configuration options:",id:"configuration-options",level:4},{value:"Noncompliant Code:",id:"noncompliant-code",level:4},{value:"Compliant Code:",id:"compliant-code",level:4},{value:"CastNullableToNonNullableType",id:"castnullabletononnullabletype",level:3},{value:"Configuration options:",id:"configuration-options-1",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-1",level:4},{value:"Compliant Code:",id:"compliant-code-1",level:4},{value:"CastToNullableType",id:"casttonullabletype",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-2",level:4},{value:"Compliant Code:",id:"compliant-code-2",level:4},{value:"CharArrayToStringCall",id:"chararraytostringcall",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-3",level:4},{value:"Compliant Code:",id:"compliant-code-3",level:4},{value:"Deprecation",id:"deprecation",level:3},{value:"DontDowncastCollectionTypes",id:"dontdowncastcollectiontypes",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-4",level:4},{value:"Compliant Code:",id:"compliant-code-4",level:4},{value:"DoubleMutabilityForCollection",id:"doublemutabilityforcollection",level:3},{value:"Configuration options:",id:"configuration-options-2",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-5",level:4},{value:"Compliant Code:",id:"compliant-code-5",level:4},{value:"<del>DuplicateCaseInWhenExpression</del>",id:"duplicatecaseinwhenexpression",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-6",level:4},{value:"Compliant Code:",id:"compliant-code-6",level:4},{value:"ElseCaseInsteadOfExhaustiveWhen",id:"elsecaseinsteadofexhaustivewhen",level:3},{value:"Configuration options:",id:"configuration-options-3",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-7",level:4},{value:"Compliant Code:",id:"compliant-code-7",level:4},{value:"EqualsAlwaysReturnsTrueOrFalse",id:"equalsalwaysreturnstrueorfalse",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-8",level:4},{value:"Compliant Code:",id:"compliant-code-8",level:4},{value:"EqualsWithHashCodeExist",id:"equalswithhashcodeexist",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-9",level:4},{value:"Compliant Code:",id:"compliant-code-9",level:4},{value:"ExitOutsideMain",id:"exitoutsidemain",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-10",level:4},{value:"Compliant Code:",id:"compliant-code-10",level:4},{value:"ExplicitGarbageCollectionCall",id:"explicitgarbagecollectioncall",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-11",level:4},{value:"HasPlatformType",id:"hasplatformtype",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-12",level:4},{value:"Compliant Code:",id:"compliant-code-11",level:4},{value:"IgnoredReturnValue",id:"ignoredreturnvalue",level:3},{value:"Configuration options:",id:"configuration-options-4",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-13",level:4},{value:"Compliant Code:",id:"compliant-code-12",level:4},{value:"ImplicitDefaultLocale",id:"implicitdefaultlocale",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-14",level:4},{value:"Compliant Code:",id:"compliant-code-13",level:4},{value:"ImplicitUnitReturnType",id:"implicitunitreturntype",level:3},{value:"Configuration options:",id:"configuration-options-5",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-15",level:4},{value:"Compliant Code:",id:"compliant-code-14",level:4},{value:"InvalidRange",id:"invalidrange",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-16",level:4},{value:"Compliant Code:",id:"compliant-code-15",level:4},{value:"IteratorHasNextCallsNextMethod",id:"iteratorhasnextcallsnextmethod",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-17",level:4},{value:"IteratorNotThrowingNoSuchElementException",id:"iteratornotthrowingnosuchelementexception",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-18",level:4},{value:"Compliant Code:",id:"compliant-code-16",level:4},{value:"LateinitUsage",id:"lateinitusage",level:3},{value:"Configuration options:",id:"configuration-options-6",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-19",level:4},{value:"MapGetWithNotNullAssertionOperator",id:"mapgetwithnotnullassertionoperator",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-20",level:4},{value:"Compliant Code:",id:"compliant-code-17",level:4},{value:"MissingPackageDeclaration",id:"missingpackagedeclaration",level:3},{value:"<del>MissingWhenCase</del>",id:"missingwhencase",level:3},{value:"Configuration options:",id:"configuration-options-7",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-21",level:4},{value:"Compliant Code:",id:"compliant-code-18",level:4},{value:"NullCheckOnMutableProperty",id:"nullcheckonmutableproperty",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-22",level:4},{value:"Compliant Code:",id:"compliant-code-19",level:4},{value:"NullableToStringCall",id:"nullabletostringcall",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-23",level:4},{value:"Compliant Code:",id:"compliant-code-20",level:4},{value:"PropertyUsedBeforeDeclaration",id:"propertyusedbeforedeclaration",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-24",level:4},{value:"Compliant Code:",id:"compliant-code-21",level:4},{value:"<del>RedundantElseInWhen</del>",id:"redundantelseinwhen",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-25",level:4},{value:"Compliant Code:",id:"compliant-code-22",level:4},{value:"UnconditionalJumpStatementInLoop",id:"unconditionaljumpstatementinloop",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-26",level:4},{value:"Compliant Code:",id:"compliant-code-23",level:4},{value:"UnnecessaryNotNullCheck",id:"unnecessarynotnullcheck",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-27",level:4},{value:"Compliant Code:",id:"compliant-code-24",level:4},{value:"UnnecessaryNotNullOperator",id:"unnecessarynotnulloperator",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-28",level:4},{value:"Compliant Code:",id:"compliant-code-25",level:4},{value:"UnnecessarySafeCall",id:"unnecessarysafecall",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-29",level:4},{value:"Compliant Code:",id:"compliant-code-26",level:4},{value:"UnreachableCatchBlock",id:"unreachablecatchblock",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-30",level:4},{value:"Compliant Code:",id:"compliant-code-27",level:4},{value:"UnreachableCode",id:"unreachablecode",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-31",level:4},{value:"UnsafeCallOnNullableType",id:"unsafecallonnullabletype",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-32",level:4},{value:"Compliant Code:",id:"compliant-code-28",level:4},{value:"UnsafeCast",id:"unsafecast",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-33",level:4},{value:"Compliant Code:",id:"compliant-code-29",level:4},{value:"UnusedUnaryOperator",id:"unusedunaryoperator",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-34",level:4},{value:"Compliant Code:",id:"compliant-code-30",level:4},{value:"UselessPostfixExpression",id:"uselesspostfixexpression",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-35",level:4},{value:"Compliant Code:",id:"compliant-code-31",level:4},{value:"WrongEqualsTypeParameter",id:"wrongequalstypeparameter",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-36",level:4},{value:"Compliant Code:",id:"compliant-code-32",level:4}],d={toc:c};function m(e){var n=e.components,t=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The potential-bugs rule set provides rules that detect potential bugs."),(0,o.kt)("h3",{id:"avoidreferentialequality"},"AvoidReferentialEquality"),(0,o.kt)("p",null,"Kotlin supports two types of equality: structural equality and referential equality. While there are\nuse cases for both, checking for referential equality for some types (such as ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"List"),") is\nlikely not intentional and may cause unexpected results."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"configuration-options"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"forbiddenTypePatterns")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"['kotlin.String']"),")"),(0,o.kt)("p",{parentName:"li"},"Specifies those types for which referential equality checks are considered a rule violation. The types are defined by a list of simple glob patterns (supporting ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," wildcards) that match the fully qualified type name."))),(0,o.kt)("h4",{id:"noncompliant-code"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'    val areEqual = "aString" === otherString\n    val areNotEqual = "aString" !== otherString\n')),(0,o.kt)("h4",{id:"compliant-code"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'    val areEqual = "aString" == otherString\n    val areNotEqual = "aString" != otherString\n')),(0,o.kt)("h3",{id:"castnullabletononnullabletype"},"CastNullableToNonNullableType"),(0,o.kt)("p",null,"Reports cast of nullable variable to non-null type. Cast like this can hide ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"\nproblems in your code. The compliant code would be that which will correctly check\nfor two things (nullability and type) and not just one (cast)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"configuration-options-1"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"ignorePlatformTypes")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,o.kt)("p",{parentName:"li"},"Whether platform types should be considered as non-nullable and ignored by this rule"))),(0,o.kt)("h4",{id:"noncompliant-code-1"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(bar: Any?) {\n    val x = bar as String\n}\n")),(0,o.kt)("h4",{id:"compliant-code-1"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun foo(bar: Any?) {\n    val x = checkNotNull(bar) as String\n}\n\n// Alternative\nfun foo(bar: Any?) {\n    val x = (bar ?: error("null assertion message")) as String\n}\n')),(0,o.kt)("h3",{id:"casttonullabletype"},"CastToNullableType"),(0,o.kt)("p",null,"Reports unsafe cast to nullable types.\n",(0,o.kt)("inlineCode",{parentName:"p"},"as String?")," is unsafed and may be misused as safe cast (",(0,o.kt)("inlineCode",{parentName:"p"},"as? String"),")."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-2"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(a: Any?) {\n    val x: String? = a as String? // If 'a' is not String, ClassCastException will be thrown.\n}\n")),(0,o.kt)("h4",{id:"compliant-code-2"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(a: Any?) {\n    val x: String? = a as? String\n}\n")),(0,o.kt)("h3",{id:"chararraytostringcall"},"CharArrayToStringCall"),(0,o.kt)("p",null,"Reports ",(0,o.kt)("inlineCode",{parentName:"p"},"CharArray.toString()")," calls that do not return the expected result."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-3"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val s = ""\nval charArray = "hello\ud83d\ude05".toCharArray()\n\nprintln("$s$charArray") // [C@4f023edb\nprintln(charArray.toString()) // [C@4f023edb\nprintln(s + charArray) // [C@4f023edb\n')),(0,o.kt)("h4",{id:"compliant-code-3"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'println("$s${charArray.concatToString()}") // hello\ud83d\ude05\nprintln(charArray.concatToString()) // hello\ud83d\ude05\nprintln(s + charArray.concatToString()) // hello\ud83d\ude05\n')),(0,o.kt)("h3",{id:"deprecation"},"Deprecation"),(0,o.kt)("p",null,"Deprecated elements are expected to be removed in the future. Alternatives should be found if possible."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Aliases"),": DEPRECATION"),(0,o.kt)("h3",{id:"dontdowncastcollectiontypes"},"DontDowncastCollectionTypes"),(0,o.kt)("p",null,"Down-casting immutable types from kotlin.collections should be discouraged.\nThe result of the downcast is platform specific and can lead to unexpected crashes.\nPrefer to use instead the ",(0,o.kt)("inlineCode",{parentName:"p"},"toMutable<Type>()")," functions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-4"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val list : List<Int> = getAList()\nif (list is MutableList) {\n    list.add(42)\n}\n\n(list as MutableList).add(42)\n")),(0,o.kt)("h4",{id:"compliant-code-4"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val list : List<Int> = getAList()\nlist.toMutableList().add(42)\n")),(0,o.kt)("h3",{id:"doublemutabilityforcollection"},"DoubleMutabilityForCollection"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," when declaring a mutable collection or value holder leads to double mutability.\nConsider instead declaring your variable with ",(0,o.kt)("inlineCode",{parentName:"p"},"val")," or switching your declaration to use an\nimmutable type."),(0,o.kt)("p",null,"By default, the rule triggers on standard mutable collections, however it can be configured\nto trigger on other types of mutable value types, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"MutableState")," from Jetpack\nCompose."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Aliases"),": DoubleMutability"),(0,o.kt)("h4",{id:"configuration-options-2"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"mutableTypes")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"['kotlin.collections.MutableList', 'kotlin.collections.MutableMap', 'kotlin.collections.MutableSet', 'java.util.ArrayList', 'java.util.LinkedHashSet', 'java.util.HashSet', 'java.util.LinkedHashMap', 'java.util.HashMap']"),")"),(0,o.kt)("p",{parentName:"li"},"Define a list of mutable types to trigger on when defined with ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),"."))),(0,o.kt)("h4",{id:"noncompliant-code-5"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'var myList = mutableListOf(1,2,3)\nvar mySet = mutableSetOf(1,2,3)\nvar myMap = mutableMapOf("answer" to 42)\n')),(0,o.kt)("h4",{id:"compliant-code-5"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Use val\nval myList = mutableListOf(1,2,3)\nval mySet = mutableSetOf(1,2,3)\nval myMap = mutableMapOf("answer" to 42)\n\n// Use immutable types\nvar myList = listOf(1,2,3)\nvar mySet = setOf(1,2,3)\nvar myMap = mapOf("answer" to 42)\n')),(0,o.kt)("h3",{id:"duplicatecaseinwhenexpression"},(0,o.kt)("del",{parentName:"h3"},"DuplicateCaseInWhenExpression")),(0,o.kt)("p",null,"Rule deprecated as compiler performs this check by default"),(0,o.kt)("p",null,"Flags duplicate ",(0,o.kt)("inlineCode",{parentName:"p"},"case")," statements in ",(0,o.kt)("inlineCode",{parentName:"p"},"when")," expressions."),(0,o.kt)("p",null,"If a ",(0,o.kt)("inlineCode",{parentName:"p"},"when")," expression contains the same ",(0,o.kt)("inlineCode",{parentName:"p"},"case")," statement multiple times they should be merged. Otherwise, it might be\neasy to miss one of the cases when reading the code, leading to unwanted side effects."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.0.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-6"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'when (i) {\n    1 -> println("one")\n    1 -> println("one")\n    else -> println("else")\n}\n')),(0,o.kt)("h4",{id:"compliant-code-6"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'when (i) {\n    1 -> println("one")\n    else -> println("else")\n}\n')),(0,o.kt)("h3",{id:"elsecaseinsteadofexhaustivewhen"},"ElseCaseInsteadOfExhaustiveWhen"),(0,o.kt)("p",null,"This rule reports ",(0,o.kt)("inlineCode",{parentName:"p"},"when")," expressions that contain an ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," case even though they have an exhaustive set of cases."),(0,o.kt)("p",null,"This occurs when the subject of the ",(0,o.kt)("inlineCode",{parentName:"p"},"when")," expression is either an enum class, sealed class or of type boolean.\nUsing ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," cases for these expressions can lead to unintended behavior when adding new enum types, sealed subtypes\nor changing the nullability of a boolean, since this will be implicitly handled by the ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," case."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"configuration-options-3"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"ignoredSubjectTypes")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,o.kt)("p",{parentName:"li"},"List of fully qualified types which should be ignored for when expressions with a subject. Example ",(0,o.kt)("inlineCode",{parentName:"p"},"kotlinx.serialization.json.JsonObject")))),(0,o.kt)("h4",{id:"noncompliant-code-7"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\nwhen(c) {\n    Color.RED -> {}\n    Color.GREEN -> {}\n    else -> {}\n}\n")),(0,o.kt)("h4",{id:"compliant-code-7"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\nwhen(c) {\n    Color.RED -> {}\n    Color.GREEN -> {}\n    Color.BLUE -> {}\n}\n")),(0,o.kt)("h3",{id:"equalsalwaysreturnstrueorfalse"},"EqualsAlwaysReturnsTrueOrFalse"),(0,o.kt)("p",null,"Reports ",(0,o.kt)("inlineCode",{parentName:"p"},"equals()")," methods which will always return true or false."),(0,o.kt)("p",null,"Equals methods should always report if some other object is equal to the current object.\nSee the Kotlin documentation for Any.equals(other: Any?):\n",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html"},"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"noncompliant-code-8"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun equals(other: Any?): Boolean {\n    return true\n}\n")),(0,o.kt)("h4",{id:"compliant-code-8"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun equals(other: Any?): Boolean {\n    return this === other\n}\n")),(0,o.kt)("h3",{id:"equalswithhashcodeexist"},"EqualsWithHashCodeExist"),(0,o.kt)("p",null,"When a class overrides the equals() method it should also override the hashCode() method."),(0,o.kt)("p",null,"All hash-based collections depend on objects meeting the equals-contract. Two equal objects must produce the\nsame hashcode. When inheriting equals or hashcode, override the inherited and call the super method for\nclarification."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.0.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-9"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Foo {\n\n    override fun equals(other: Any?): Boolean {\n        return super.equals(other)\n    }\n}\n")),(0,o.kt)("h4",{id:"compliant-code-9"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Foo {\n\n    override fun equals(other: Any?): Boolean {\n        return super.equals(other)\n    }\n\n    override fun hashCode(): Int {\n        return super.hashCode()\n    }\n}\n")),(0,o.kt)("h3",{id:"exitoutsidemain"},"ExitOutsideMain"),(0,o.kt)("p",null,"Reports the usage of ",(0,o.kt)("inlineCode",{parentName:"p"},"System.exit()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Runtime.exit()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Runtime.halt()")," and Kotlin's ",(0,o.kt)("inlineCode",{parentName:"p"},"exitProcess()"),"\nwhen used outside the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," function.\nThis makes code more difficult to test, causes unexpected behaviour on Android, and is a poor way to signal a\nfailure in the program. In almost all cases it is more appropriate to throw an exception."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-10"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun randomFunction() {\n    val result = doWork()\n    if (result == FAILURE) {\n        exitProcess(2)\n    } else {\n        exitProcess(0)\n    }\n}\n")),(0,o.kt)("h4",{id:"compliant-code-10"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun main() {\n    val result = doWork()\n    if (result == FAILURE) {\n        exitProcess(2)\n    } else {\n        exitProcess(0)\n    }\n}\n")),(0,o.kt)("h3",{id:"explicitgarbagecollectioncall"},"ExplicitGarbageCollectionCall"),(0,o.kt)("p",null,"Reports all calls to explicitly trigger the Garbage Collector.\nCode should work independently of the garbage collector and should not require the GC to be triggered in certain\npoints in time."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.0.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"noncompliant-code-11"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"System.gc()\nRuntime.getRuntime().gc()\nSystem.runFinalization()\n")),(0,o.kt)("h3",{id:"hasplatformtype"},"HasPlatformType"),(0,o.kt)("p",null,"Platform types must be declared explicitly in public APIs to prevent unexpected errors."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-12"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person {\n    fun apiCall() = System.getProperty("propertyName")\n}\n')),(0,o.kt)("h4",{id:"compliant-code-11"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person {\n    fun apiCall(): String = System.getProperty("propertyName")\n}\n')),(0,o.kt)("h3",{id:"ignoredreturnvalue"},"IgnoredReturnValue"),(0,o.kt)("p",null,"This rule warns on instances where a function, annotated with either ",(0,o.kt)("inlineCode",{parentName:"p"},"@CheckReturnValue")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@CheckResult"),",\nreturns a value but that value is not used in any way. The Kotlin compiler gives no warning for this scenario\nnormally so that's the rationale behind this rule."),(0,o.kt)("p",null,"fun returnsValue() = 42\nfun returnsNoValue() {}"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"configuration-options-4"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("del",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"del"},"restrictToAnnotatedMethods"))," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Deprecated"),": Use ",(0,o.kt)("inlineCode",{parentName:"p"},"restrictToConfig")," instead"),(0,o.kt)("p",{parentName:"li"},"if the rule should check only annotated methods")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"restrictToConfig")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,o.kt)("p",{parentName:"li"},"If the rule should check only methods matching to configuration, or all methods")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"returnValueAnnotations")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"['CheckResult', '*.CheckResult', 'CheckReturnValue', '*.CheckReturnValue']"),")"),(0,o.kt)("p",{parentName:"li"},"List of glob patterns to be used as inspection annotation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"ignoreReturnValueAnnotations")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"['CanIgnoreReturnValue', '*.CanIgnoreReturnValue']"),")"),(0,o.kt)("p",{parentName:"li"},"Annotations to skip this inspection")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"returnValueTypes")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"['kotlin.sequences.Sequence', 'kotlinx.coroutines.flow.*Flow', 'java.util.stream.*Stream']"),")"),(0,o.kt)("p",{parentName:"li"},"List of return types that should not be ignored")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"ignoreFunctionCall")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,o.kt)("p",{parentName:"li"},"List of function signatures which should be ignored by this rule. Specifying fully-qualified function signature with name only (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"java.time.LocalDate.now"),") will ignore all function calls matching the name. Specifying fully-qualified function signature with parameters (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"java.time.LocalDate.now(java.time.Clock)"),") will ignore only function calls matching the name and parameters exactly."))),(0,o.kt)("h4",{id:"noncompliant-code-13"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"returnsValue()\n")),(0,o.kt)("h4",{id:"compliant-code-12"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"if (42 == returnsValue()) {}\nval x = returnsValue()\n")),(0,o.kt)("h3",{id:"implicitdefaultlocale"},"ImplicitDefaultLocale"),(0,o.kt)("p",null,"Prefer passing ","[java.util.Locale]"," explicitly than using implicit default value when formatting\nstrings or performing a case conversion."),(0,o.kt)("p",null,"The default locale is almost always inappropriate for machine-readable text like HTTP headers.\nFor example, if locale with tag ",(0,o.kt)("inlineCode",{parentName:"p"},"ar-SA-u-nu-arab")," is a current default then ",(0,o.kt)("inlineCode",{parentName:"p"},"%d")," placeholders\nwill be evaluated to a number consisting of Eastern-Arabic (non-ASCII) digits.\n","[java.util.Locale.US]"," is recommended for machine-readable output."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.16.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-14"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'String.format("Timestamp: %d", System.currentTimeMillis())\n"Timestamp: %d".format(System.currentTimeMillis())\n\nval str: String = getString()\nstr.toUpperCase()\nstr.toLowerCase()\n')),(0,o.kt)("h4",{id:"compliant-code-13"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'String.format(Locale.US, "Timestamp: %d", System.currentTimeMillis())\n"Timestamp: %d".format(Locale.US, System.currentTimeMillis())\n\nval str: String = getString()\nstr.toUpperCase(Locale.US)\nstr.toLowerCase(Locale.US)\n')),(0,o.kt)("h3",{id:"implicitunitreturntype"},"ImplicitUnitReturnType"),(0,o.kt)("p",null,"Functions using expression statements have an implicit return type.\nChanging the type of the expression accidentally, changes the functions return type.\nThis may lead to backward incompatibility.\nUse a block statement to make clear this function will never return a value."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"configuration-options-5"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"allowExplicitReturnType")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,o.kt)("p",{parentName:"li"},"if functions with explicit ",(0,o.kt)("inlineCode",{parentName:"p"},"Unit")," return type should be allowed"))),(0,o.kt)("h4",{id:"noncompliant-code-15"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun errorProneUnit() = println("Hello Unit")\nfun errorProneUnitWithParam(param: String) = param.run { println(this) }\nfun String.errorProneUnitWithReceiver() = run { println(this) }\n')),(0,o.kt)("h4",{id:"compliant-code-14"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun blockStatementUnit() {\n    // code\n}\n\n// explicit Unit is compliant by default; can be configured to enforce block statement\nfun safeUnitReturn(): Unit = println("Hello Unit")\n')),(0,o.kt)("h3",{id:"invalidrange"},"InvalidRange"),(0,o.kt)("p",null,"Reports ranges which are empty.\nThis might be a bug if it is used for instance as a loop condition. This loop will never be triggered then.\nThis might be due to invalid ranges like (10..9) which will cause the loop to never be entered."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-16"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 2..1) {}\nfor (i in 1 downTo 2) {}\n\nval range1 = 2 until 1\nval range2 = 2 until 2\n")),(0,o.kt)("h4",{id:"compliant-code-15"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 2..2) {}\nfor (i in 2 downTo 2) {}\n\nval range = 2 until 3\n")),(0,o.kt)("h3",{id:"iteratorhasnextcallsnextmethod"},"IteratorHasNextCallsNextMethod"),(0,o.kt)("p",null,"Verifies implementations of the Iterator interface.\nThe hasNext() method of an Iterator implementation should not have any side effects.\nThis rule reports implementations that call the next() method of the Iterator inside the hasNext() method."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-17"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyIterator : Iterator<String> {\n\n    override fun hasNext(): Boolean {\n        return next() != null\n    }\n}\n")),(0,o.kt)("h3",{id:"iteratornotthrowingnosuchelementexception"},"IteratorNotThrowingNoSuchElementException"),(0,o.kt)("p",null,"Reports implementations of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Iterator")," interface which do not throw a NoSuchElementException in the\nimplementation of the next() method. When there are no more elements to return an Iterator should throw a\nNoSuchElementException."),(0,o.kt)("p",null,"See: ",(0,o.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html#next()"},"https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html#next()")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-18"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyIterator : Iterator<String> {\n\n    override fun next(): String {\n        return ""\n    }\n}\n')),(0,o.kt)("h4",{id:"compliant-code-16"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyIterator : Iterator<String> {\n\n    override fun next(): String {\n        if (!this.hasNext()) {\n            throw NoSuchElementException()\n        }\n        // ...\n    }\n}\n")),(0,o.kt)("h3",{id:"lateinitusage"},"LateinitUsage"),(0,o.kt)("p",null,"Reports usages of the lateinit modifier."),(0,o.kt)("p",null,"Using lateinit for property initialization can be error-prone and the actual initialization is not\nguaranteed. Try using constructor injection or delegation to initialize properties."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"configuration-options-6"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("del",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"del"},"excludeAnnotatedProperties"))," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Deprecated"),": Use ",(0,o.kt)("inlineCode",{parentName:"p"},"ignoreAnnotated")," instead"),(0,o.kt)("p",{parentName:"li"},"Allows you to provide a list of annotations that disable this check.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"ignoreOnClassesPattern")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"''"),")"),(0,o.kt)("p",{parentName:"li"},"Allows you to disable the rule for a list of classes"))),(0,o.kt)("h4",{id:"noncompliant-code-19"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Foo {\n    private lateinit var i1: Int\n    lateinit var i2: Int\n}\n")),(0,o.kt)("h3",{id:"mapgetwithnotnullassertionoperator"},"MapGetWithNotNullAssertionOperator"),(0,o.kt)("p",null,"Reports calls of the map access methods ",(0,o.kt)("inlineCode",{parentName:"p"},"map[]")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"map.get()")," with a not-null assertion operator ",(0,o.kt)("inlineCode",{parentName:"p"},"!!"),".\nThis may result in a NullPointerException.\nPreferred access methods are ",(0,o.kt)("inlineCode",{parentName:"p"},"map[]")," without ",(0,o.kt)("inlineCode",{parentName:"p"},"!!"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"map.getValue()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"map.getOrDefault()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"map.getOrElse()"),"."),(0,o.kt)("p",null,"Based on an IntelliJ IDEA inspection MapGetWithNotNullAssertionOperatorInspection."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-20"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val map = emptyMap<String, String>()\nmap["key"]!!\n\nval map = emptyMap<String, String>()\nmap.get("key")!!\n')),(0,o.kt)("h4",{id:"compliant-code-17"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val map = emptyMap<String, String>()\nmap["key"]\n\nval map = emptyMap<String, String>()\nmap.getValue("key")\n\nval map = emptyMap<String, String>()\nmap.getOrDefault("key", "")\n\nval map = emptyMap<String, String>()\nmap.getOrElse("key", { "" })\n')),(0,o.kt)("h3",{id:"missingpackagedeclaration"},"MissingPackageDeclaration"),(0,o.kt)("p",null,"Reports when the package declaration is missing."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h3",{id:"missingwhencase"},(0,o.kt)("del",{parentName:"h3"},"MissingWhenCase")),(0,o.kt)("p",null,"Rule deprecated as compiler performs this check by default"),(0,o.kt)("p",null,"Turn on this rule to flag ",(0,o.kt)("inlineCode",{parentName:"p"},"when")," expressions that do not check that all cases are covered when the subject is an enum\nor sealed class and the ",(0,o.kt)("inlineCode",{parentName:"p"},"when")," expression is used as a statement."),(0,o.kt)("p",null,"When this happens it's unclear what was intended when an unhandled case is reached. It is better to be explicit and\neither handle all cases or use a default ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," statement to cover the unhandled cases."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"configuration-options-7"},"Configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"allowElseExpression")," (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),")"),(0,o.kt)("p",{parentName:"li"},"whether ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," can be treated as a valid case for enums and sealed classes"))),(0,o.kt)("h4",{id:"noncompliant-code-21"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\nfun whenOnEnumFail(c: Color) {\n    when(c) {\n        Color.BLUE -> {}\n        Color.GREEN -> {}\n    }\n}\n")),(0,o.kt)("h4",{id:"compliant-code-18"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\nfun whenOnEnumCompliant(c: Color) {\n    when(c) {\n        Color.BLUE -> {}\n        Color.GREEN -> {}\n        Color.RED -> {}\n    }\n}\n\nfun whenOnEnumCompliant2(c: Color) {\n    when(c) {\n        Color.BLUE -> {}\n        else -> {}\n    }\n}\n")),(0,o.kt)("h3",{id:"nullcheckonmutableproperty"},"NullCheckOnMutableProperty"),(0,o.kt)("p",null,"Reports null-checks on mutable properties, as these properties' value can be\nchanged - and thus make the null-check invalid - after the execution of the\nif-statement."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-22"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class A(private var a: Int?) {\nfun foo() {\n    if (a != null) {\n      println(2 + a!!)\n    }\n}\n}\n")),(0,o.kt)("h4",{id:"compliant-code-19"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class A(private val a: Int?) {\nfun foo() {\n    if (a != null) {\n      println(2 + a)\n    }\n}\n}\n")),(0,o.kt)("h3",{id:"nullabletostringcall"},"NullableToStringCall"),(0,o.kt)("p",null,"Reports ",(0,o.kt)("inlineCode",{parentName:"p"},"toString()"),' calls with a nullable receiver that may return the string "null".'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-23"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun foo(a: Any?): String {\n    return a.toString()\n}\n\nfun bar(a: Any?): String {\n    return "$a"\n}\n')),(0,o.kt)("h4",{id:"compliant-code-20"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun foo(a: Any?): String {\n    return a?.toString() ?: "-"\n}\n\nfun bar(a: Any?): String {\n    return "${a ?: "-"}"\n}\n')),(0,o.kt)("h3",{id:"propertyusedbeforedeclaration"},"PropertyUsedBeforeDeclaration"),(0,o.kt)("p",null,"Reports properties that are used before declaration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-24"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class C {\n    private val number\n        get() = if (isValid) 1 else 0\n\n    val list = listOf(number)\n\n    private val isValid = true\n}\n\nfun main() {\n    println(C().list) // [0]\n}\n")),(0,o.kt)("h4",{id:"compliant-code-21"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class C {\n    private val isValid = true\n\n    private val number\n        get() = if (isValid) 1 else 0\n\n    val list = listOf(number)\n}\n\nfun main() {\n    println(C().list) // [1]\n}\n")),(0,o.kt)("h3",{id:"redundantelseinwhen"},(0,o.kt)("del",{parentName:"h3"},"RedundantElseInWhen")),(0,o.kt)("p",null,"Rule deprecated as compiler performs this check by default"),(0,o.kt)("p",null,"Reports ",(0,o.kt)("inlineCode",{parentName:"p"},"when")," expressions that contain a redundant ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," case. This occurs when it can be\nverified that all cases are already covered when checking cases on an enum or sealed class."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-25"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\nfun whenOnEnumFail(c: Color) {\n    when(c) {\n        Color.BLUE -> {}\n        Color.GREEN -> {}\n        Color.RED -> {}\n        else -> {}\n    }\n}\n")),(0,o.kt)("h4",{id:"compliant-code-22"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class Color {\n    RED,\n    GREEN,\n    BLUE\n}\n\nfun whenOnEnumCompliant(c: Color) {\n    when(c) {\n        Color.BLUE -> {}\n        Color.GREEN -> {}\n        else -> {}\n    }\n}\n\nfun whenOnEnumCompliant2(c: Color) {\n    when(c) {\n        Color.BLUE -> {}\n        Color.GREEN -> {}\n        Color.RED -> {}\n    }\n}\n")),(0,o.kt)("h3",{id:"unconditionaljumpstatementinloop"},"UnconditionalJumpStatementInLoop"),(0,o.kt)("p",null,"Reports loops which contain jump statements that jump regardless of any conditions.\nThis implies that the loop is only executed once and thus could be rewritten without a\nloop altogether."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-26"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 1..2) break\n")),(0,o.kt)("h4",{id:"compliant-code-23"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 1..2) {\n    if (i == 1) break\n}\n")),(0,o.kt)("h3",{id:"unnecessarynotnullcheck"},"UnnecessaryNotNullCheck"),(0,o.kt)("p",null,"Reports unnecessary not-null checks with ",(0,o.kt)("inlineCode",{parentName:"p"},"requireNotNull")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"checkNotNull")," that can be removed by the user."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": No"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-27"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'var string = "foo"\nprintln(requireNotNull(string))\n')),(0,o.kt)("h4",{id:"compliant-code-24"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'var string : String? = "foo"\nprintln(requireNotNull(string))\n')),(0,o.kt)("h3",{id:"unnecessarynotnulloperator"},"UnnecessaryNotNullOperator"),(0,o.kt)("p",null,"Reports unnecessary not-null operator usage (!!) that can be removed by the user."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.16.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-28"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val a = 1\nval b = a!!\n")),(0,o.kt)("h4",{id:"compliant-code-25"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val a = 1\nval b = a\n")),(0,o.kt)("h3",{id:"unnecessarysafecall"},"UnnecessarySafeCall"),(0,o.kt)("p",null,"Reports unnecessary safe call operators (",(0,o.kt)("inlineCode",{parentName:"p"},"?."),") that can be removed by the user."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.16.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-29"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val a: String = ""\nval b = a?.length\n')),(0,o.kt)("h4",{id:"compliant-code-26"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val a: String? = null\nval b = a?.length\n")),(0,o.kt)("h3",{id:"unreachablecatchblock"},"UnreachableCatchBlock"),(0,o.kt)("p",null,"Reports unreachable catch blocks.\nCatch blocks can be unreachable if the exception has already been caught in the block above."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-30"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun test() {\n    try {\n        foo()\n    } catch (t: Throwable) {\n        bar()\n    } catch (e: Exception) {\n        // Unreachable\n        baz()\n    }\n}\n")),(0,o.kt)("h4",{id:"compliant-code-27"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun test() {\n    try {\n        foo()\n    } catch (e: Exception) {\n        baz()\n    } catch (t: Throwable) {\n        bar()\n    }\n}\n")),(0,o.kt)("h3",{id:"unreachablecode"},"UnreachableCode"),(0,o.kt)("p",null,"Reports unreachable code.\nCode can be unreachable because it is behind return, throw, continue or break expressions.\nThis unreachable code should be removed as it serves no purpose."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.0.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-31"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 1..2) {\n    break\n    println() // unreachable\n}\n\nthrow IllegalArgumentException()\nprintln() // unreachable\n\nfun f() {\n    return\n    println() // unreachable\n}\n")),(0,o.kt)("h3",{id:"unsafecallonnullabletype"},"UnsafeCallOnNullableType"),(0,o.kt)("p",null,"Reports unsafe calls on nullable types. These calls will throw a NullPointerException in case\nthe nullable value is null. Kotlin provides many ways to work with nullable types to increase\nnull safety. Guard the code appropriately to prevent NullPointerExceptions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"noncompliant-code-32"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(str: String?) {\n    println(str!!.length)\n}\n")),(0,o.kt)("h4",{id:"compliant-code-28"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(str: String?) {\n    println(str?.length)\n}\n")),(0,o.kt)("h3",{id:"unsafecast"},"UnsafeCast"),(0,o.kt)("p",null,"Reports casts that will never succeed."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.16.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Aliases"),": UNCHECKED_CAST"),(0,o.kt)("h4",{id:"noncompliant-code-33"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(s: String) {\n    println(s as Int)\n}\n\nfun bar(s: String) {\n    println(s as? Int)\n}\n")),(0,o.kt)("h4",{id:"compliant-code-29"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun foo(s: Any) {\n    println(s as Int)\n}\n")),(0,o.kt)("h3",{id:"unusedunaryoperator"},"UnusedUnaryOperator"),(0,o.kt)("p",null,"Detects unused unary operators."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Requires Type Resolution")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 5min"),(0,o.kt)("h4",{id:"noncompliant-code-34"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val x = 1 + 2\n    + 3 + 4\nprintln(x) // 3\n")),(0,o.kt)("h4",{id:"compliant-code-30"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val x = 1 + 2 + 3 + 4\nprintln(x) // 10\n")),(0,o.kt)("h3",{id:"uselesspostfixexpression"},"UselessPostfixExpression"),(0,o.kt)("p",null,"Reports postfix expressions (++, --) which are unused and thus unnecessary.\nThis leads to confusion as a reader of the code might think the value will be incremented/decremented.\nHowever, the value is replaced with the original value which might lead to bugs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.21.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 20min"),(0,o.kt)("h4",{id:"noncompliant-code-35"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"var i = 0\ni = i--\ni = 1 + i++\ni = i++ + 1\n\nfun foo(): Int {\n    var i = 0\n    // ...\n    return i++\n}\n")),(0,o.kt)("h4",{id:"compliant-code-31"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"var i = 0\ni--\ni = i + 2\ni = i + 2\n\nfun foo(): Int {\n    var i = 0\n    // ...\n    i++\n    return i\n}\n")),(0,o.kt)("h3",{id:"wrongequalstypeparameter"},"WrongEqualsTypeParameter"),(0,o.kt)("p",null,"Reports equals() methods which take in a wrongly typed parameter.\nCorrect implementations of the equals() method should only take in a parameter of type Any?\nSee: ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html"},"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Active by default"),": Yes - Since v1.2.0"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Debt"),": 10min"),(0,o.kt)("h4",{id:"noncompliant-code-36"},"Noncompliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Foo {\n\n    fun equals(other: String): Boolean {\n        return super.equals(other)\n    }\n}\n")),(0,o.kt)("h4",{id:"compliant-code-32"},"Compliant Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Foo {\n\n    fun equals(other: Any?): Boolean {\n        return super.equals(other)\n    }\n}\n")))}m.isMDXComponent=!0}}]);